
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module rippleCarryAdder_timing_analysis(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk;
assign clk = MAX10_CLK1_50;

wire rst;
assign rst = ~KEY[0];

// From RAM
wire [47:0] a;
wire [47:0] b;

wire cin;
assign cin = 1'b1;

// Pipeline stages
wire [11:0] a_upper_d, b_upper_d;
wire [11:0] a_upper_mid_d, b_upper_mid_d;
wire [11:0] a_lower_mid_d, b_lower_mid_d;

reg  [11:0] a_upper_q1, b_upper_q1;
reg  [11:0] a_upper_q2, b_upper_q2;
reg  [11:0] a_upper_q3, b_upper_q3;

reg [11:0] a_upper_mid_q1, b_upper_mid_q1;
reg [11:0] a_upper_mid_q2, b_upper_mid_q2;

reg [11:0] a_lower_mid_q1, b_lower_mid_q1;

wire [11:0] sum_lower_d, sum_lower_middle_d, sum_upper_middle_d;
reg  [11:0] sum_lower_q1, sum_lower_q2, sum_lower_q3;
reg  [11:0] sum_lower_middle_q1, sum_lower_middle_q2;
reg  [11:0] sum_upper_middle_q1;
wire c_carry_d1, c_carry_d2, c_carry_d3;
reg  c_carry_q1, c_carry_q2, c_carry_q3;
reg [3:0]  addr_pipe1, addr_pipe2, addr_pipe3;

// Write address delay by 4 cycle compared to read
reg [3:0] addr_in, addr_out;

wire [47:0] sum;
wire cout;
wire [47:0] data_out;

//=======================================================
//  Structural coding
//=======================================================

assign a_upper_d = a[47:36];
assign b_upper_d = b[47:36];

assign a_upper_mid_d = a[35:24];
assign b_upper_mid_d = b[35:24];

assign a_lower_mid_d = a[23:12];
assign b_lower_mid_d = b[23:12];

ram_48x16_A u_RAM_a (
	.mwr  ( 1'b0     ),  // read-only
	.addr ( addr_in  ),
	.mdi  ( 48'd0    ), // read-only
	.clk  ( clk      ),
	.mdo  ( a        )
);

ram_48x16_B u_RAM_B (
	.mwr  ( 1'b0     ),  // read-only
	.addr ( addr_in  ),
	.mdi  ( 48'd0    ), // read-only
	.clk  ( clk      ),
	.mdo  ( b        )
);

// First stage RCA
rippleCarryAdder # (
    .Nbits(12),
    .signd(1'b0)
  )
  rippleCarryAdder_stage1 (
    .a(a[11:0]),
    .b(b[11:0]),
    .cin(cin),
    .sum(sum_lower_d),
    .cout(c_carry_d1)
  );

// Second stage RCA
  rippleCarryAdder # (
    .Nbits(12),
    .signd(1'b0)
  )
  rippleCarryAdder_stage2 (
    .a(a_lower_mid_q1),
    .b(b_lower_mid_q1),
    .cin(c_carry_q1),
    .sum(sum_lower_middle_d),
    .cout(c_carry_d2)
  );

  // Third stage RCA
  rippleCarryAdder # (
    .Nbits(12),
    .signd(1'b0)
  )
  rippleCarryAdder_stage3 (
    .a(a_upper_mid_q2),
    .b(b_upper_mid_q2),
    .cin(c_carry_q2),
    .sum(sum_upper_middle_d),
    .cout(c_carry_d3)
  );

  // Fourth stage RCA
  rippleCarryAdder # (
    .Nbits(12),
    .signd(1'b0)
  )
  rippleCarryAdder_stage4 (
    .a(a_upper_q3),
    .b(b_upper_q3),
    .cin(c_carry_q3),
    .sum(sum[47:36]),
    .cout(cout)
  );

  assign sum[35:24] = sum_upper_middle_q1;
  assign sum[23:12] = sum_lower_middle_q2;
  assign sum[11:0]  = sum_lower_q3;


ram_48x16_C  ram_48x16_C_inst (
    .mwr(1'b1),	 // Always write
    .addr(addr_out),
    .mdi(sum),
    .clk(clk),
    .mdo(data_out)
  );

// To prevent quartus optimizations, drive real outputs
assign HEX0[7:0] = data_out[7:0];
assign HEX1[7:0] = data_out[15:8];
assign HEX2[7:0] = data_out[23:16];
assign HEX3[7:0] = data_out[31:24];
assign HEX4[7:0] = data_out[39:32];
assign HEX5[7:0] = data_out[47:40];

// Address change logic
always @(posedge clk) begin
	if (rst) begin
		addr_in    <= 4'b0000;
		addr_pipe1  <= 4'b0000;
		addr_pipe2  <= 4'b0000;
		addr_pipe3  <= 4'b0000;
		addr_out   <= 4'b0000;

		a_upper_q1     <= 12'd0;
		a_upper_q2     <= 12'd0;
		a_upper_q3     <= 12'd0;
		a_upper_mid_q1 <= 12'd0;
		a_upper_mid_q2 <= 12'd0;
		a_lower_mid_q1 <= 12'd0;

		b_upper_q1  <= 12'd0;
		b_upper_q2  <= 12'd0;
		b_upper_q3  <= 12'd0;
		b_upper_mid_q1 <= 12'd0;
		b_upper_mid_q2 <= 12'd0;
		b_lower_mid_q1 <= 12'd0;

		sum_lower_q1 <= 12'd0;
		sum_lower_q2 <= 12'd0;
		sum_lower_q3 <= 12'd0;

		sum_lower_middle_q1 <= 12'd0;
		sum_lower_middle_q2 <= 12'd0;

		sum_upper_middle_q1 <= 12'd0;

		c_carry_q1  <= 1'b0;
		c_carry_q2  <= 1'b0;
		c_carry_q3  <= 1'b0;
		
	end else begin
		addr_in     <= addr_in + 4'b0001;
		addr_pipe1  <= addr_in;
		addr_pipe2  <= addr_pipe1;
		addr_pipe3  <= addr_pipe2;
		addr_out    <= addr_pipe3;

		a_upper_q1     <= a_upper_d;
		a_upper_q2     <= a_upper_q1;
		a_upper_q3     <= a_upper_q2;
		a_upper_mid_q1 <= a_upper_mid_d;
		a_upper_mid_q2 <= a_upper_mid_q1;
		a_lower_mid_q1 <= a_lower_mid_d;

		b_upper_q1     <= b_upper_d;
		b_upper_q2     <= b_upper_q1;
		b_upper_q3     <= b_upper_q2;
		b_upper_mid_q1 <= b_upper_mid_d;
		b_upper_mid_q2 <= b_upper_mid_q1;
		b_lower_mid_q1 <= b_lower_mid_d;

		sum_lower_q1 <= sum_lower_d;
		sum_lower_q2 <= sum_lower_q1;
		sum_lower_q3 <= sum_lower_q2;

		sum_lower_middle_q1 <= sum_lower_middle_d;
		sum_lower_middle_q2 <= sum_lower_middle_q1;

		sum_upper_middle_q1 <= sum_upper_middle_d;

		c_carry_q1  <= c_carry_d1;
		c_carry_q2  <= c_carry_d2;
		c_carry_q3  <= c_carry_d3;

	end
end
endmodule
